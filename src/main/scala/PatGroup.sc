import scala.util.matching.Regex

def allMatch(pattern: Regex,
             text: String): String = {
  pattern.findAllIn(text).mkString(",")
}
// Группы
println(allMatch("(как|кот|ток)".r,
  "как кот пропускает ток"))

println(allMatch("(как|кот|ток)".r,
  "как пропускает ток"))

// | работает как и или одновременно
// можно делать группы внутри групп

// $1 $2 $3 - позволяют обработать результат
// что-то использовать, что-то изменить

// Вперед смотрящие и назад смотрящие:

// Пример: хотим цифры после букв:
println(allMatch("[a-z]+[0-9]+".r,
  ".1 b2 c3 d33 gg"))

// Теперь получаем только цифры
println(allMatch("(?<=[a-z])+[0-9]+".r,
  ".1 b2 c3 d33 gg"))

// Получаем только буквы (назад смотрящее:)
println(allMatch("[a-z](?=[0-9]+)".r,
  ".1 b2 c3 d33 gg"))
// Выбрать буквы, после которых все что угодно, но не цифры
// Отрицательное назад смотрящее выражение:
println(allMatch("[a-z](?![0-9]+)".r,
  ".1 b2 c3 d33 gg"))

// Выбрать цифры, перед которыми все что угодно, но не буквы
// Отрицательное вперед смотрящее выражение:
println(allMatch("(?<![a-z]+)[0-9]+".r,
  ".1 b2 c3 d33 gg"))
